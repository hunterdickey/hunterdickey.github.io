moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA)
)
logit_model <- glm(
leadrisk ~ family + moving_yr + tenure + PUMA ,
family = quasibinomial(),
data = sf_pums_clean
)
summary(logit_model)
sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07503, family = 4, tenure = 3, moving_yr = 1), type = "response")
sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
class(sf_pums_clean$BLD)
class(sf_pums_clean$family)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5),)
class(sf_pums_clean$PUMA)
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
numeric(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
numeric(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
numeric(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA)
)
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
as.numeric() %>%
sort()
)
)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = PUMA %>%
factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
as.numeric() %>%
sort()
)
)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
predict(logit_model, PUMA = 07501, family = 8, tenure = 3, moving_yr = 5, type = "response")
predict(logit_model, c(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
model <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(model), type = "response")
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
predict(logit_model, model(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = PUMA %>%
as.factor(
levels = sf_pums_clean$PUMA %>%
unique() %>%
as.numeric() %>%
sort()
)
)
predict(logit_model, data.frame(family = 8, tenure = 3, moving_yr = 5), type = "response")
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA) %>%
)
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA) %>%
)
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA)
)
model <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
logit_model <- glm(
leadrisk ~ family + moving_yr + tenure + PUMA,
family = quasibinomial(),
data = sf_pums_clean
)
logit_model <- glm(
leadrisk ~ family + moving_yr + tenure + PUMA ,
family = quasibinomial(),
data = sf_pums_clean
)
# BLD- single family vs multi family
# TEN- renter vs owner
# MV is like moving year ranges window
# puma is the geographic
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA)
)
logit_model <- glm(
leadrisk ~ family + moving_yr + tenure + PUMA ,
family = quasibinomial(),
data = sf_pums_clean
)
knitr::opts_chunk$set(echo = F, warning = F, message = F)
library(tidyverse)
library(censusapi)
library(sf)
library(mapview)
library(tigris)
library(readxl)
library(leaflet)
Sys.setenv(CENSUS_KEY="c8aa67e4086b4b5ce3a8717f59faa9a28f611dab")
pums_2019_1yr <- readRDS("a6_pums.rds")
ca_pumas <-
pumas("CA", cb = T, progress_bar = F)
sf_boundary <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME == "San Francisco")
sf_pumas <-
ca_pumas %>%
st_centroid() %>%
.[sf_boundary, ] %>%
st_drop_geometry() %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
sf_pums <- pums_2019_1yr %>%
mutate(
PUMA = str_pad(public_use_microdata_area,5,"left","0")
) %>%
filter(PUMA %in% sf_pumas$PUMACE10)
class(sf_pums$YBL)
mapview(sf_pumas)
sf_pums_clean <- sf_pums %>%
filter(YBL %in% c("1","2","3"))
#or
#1960
sf_pums_clean <- sf_pums %>%
filter(YBL %in% as.character(1:3))
unique(sf_pums$YBL)
sf_pums_clean <- sf_pums %>%
mutate(
YBL = as.numeric(YBL),
AGE = as.numeric (AGEP),
HINCP = as.numeric(HINCP),
leadrisk = ifelse(
as.numeric(HINCP) < 90000 &
as.numeric(AGEP) < 6,
1,
0
),
) %>%
filter(YBL %in% 1:3) %>%
arrange(AGEP) %>%
group_by(SERIALNO) %>%
summarize_all(first)
# BLD- single family vs multi family
# TEN- renter vs owner
# MV is like moving year ranges window
# puma is the geographic
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA)
)
logit_model <- glm(
leadrisk ~ family + moving_yr + tenure + PUMA ,
family = quasibinomial(),
data = sf_pums_clean
)
print(summary(logit_model))
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
class(sf_pums_clean$PUMA)
sample_n(sf_pums_clean, 1, replace = TRUE)
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA)
)
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
as.numeric(c(sf_pums_clean$family, sf_pums_clean$tenure, sf_pums_clean$moving_yr))
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
as.numeric(c(sf_pums_clean$family, sf_pums_clean$tenure, sf_pums_clean$moving_yr, sf_pums_clean$PUMA))
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, data.frame(PUMA = 07501, family = 8, tenure = 3, moving_yr = 5), type = "response")
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, model_sample, type = "response")
class(sf_pums_clean$PUMA)
sf_pums_clean <- sf_pums_clean %>%
mutate(
family = BLD %>%
factor(
levels = sf_pums_clean$BLD %>%
unique() %>%
as.numeric() %>%
sort()
),
tenure = TEN %>%
factor(
levels = sf_pums_clean$TEN %>%
unique() %>%
as.numeric() %>%
sort()
),
moving_yr = MV %>%
factor(
levels = sf_pums_clean$MV %>%
unique() %>%
as.numeric() %>%
sort()
),
PUMA = as.factor(PUMA)
)
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, model_sample, type = "response")
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, model_sample, type = "response")
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
predict(logit_model, model_sample, type = "response")
print(predict(logit_model, model_sample, type = "response"))
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
print(predict(logit_model, model_sample, type = "response"))
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
print(predict(logit_model, model_sample, type = "response"))
model_sample <- sample_n(sf_pums_clean, 1, replace = TRUE)
print(predict(logit_model, model_sample, type = "response"))
model_sample
getwd()
setwd("~/Documents/GitHub/hunterdickey.github.io")
getwd()
setwd("~/Documents/GitHub/hunterdickey.github.io")
setwd("~/Documents/GitHub/hunterdickey.github.io")
knitr::opts_chunk$set(echo = F, warning = F, message = F)
setwd("~/Documents/GitHub/hunterdickey.github.io")
getwd()
setwd("~/Documents/GitHub/hunterdickey.github.io")
getwd()
knitr::opts_chunk$set(echo = F, warning = F, message = F)
pums_2019_1yr <- readRDS("a6_pums.rds")
pums_2019_1yr <- getCensus(
name = "acs/acs1/pums",
vintage = 2019,
region = "public use microdata area:*",
regionin = "state:06",
vars = c(
"SERIALNO",
"SPORDER",
"PWGTP",
"WGTP",
"YBL",
"BLD",
"TEN",
"MV",
"HINCP",
"AGEP"
)
)
pums_2019_1yr <- readRDS("a6_pums.rds")
#puma bigger than censu tract smaller than county
ca_pumas <-
pumas("CA", cb = T, progress_bar = F)
sf_boundary <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME == "San Francisco")
sf_boundary <-
counties("CA", cb = T, progress_bar = F) %>%
filter(NAME == "San Francisco")
sf_pumas <-
ca_pumas %>%
st_centroid() %>%
.[sf_boundary, ] %>%
st_drop_geometry() %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
sf_pumas <-
ca_pumas %>%
st_centroid() %>%
.[sf_boundary, ] %>%
st_drop_geometry() %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
sf_pums <- pums_2019_1yr %>%
mutate(
PUMA = str_pad(public_use_microdata_area,5,"left","0")
) %>%
filter(PUMA %in% sf_pumas$PUMACE10)
sf_pumas <-
ca_pumas %>%
st_centroid() %>%
.[sf_boundary, ] %>%
st_drop_geometry() %>%
left_join(ca_pumas %>% select(GEOID10)) %>%
st_as_sf()
sf_pums <- pums_2019_1yr %>%
mutate(
PUMA = str_pad(public_use_microdata_area,5,"left","0")
) %>%
filter(PUMA %in% sf_pumas$PUMACE10)
class(sf_pums$YBL)
